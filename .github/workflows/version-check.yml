name: version-check

on:
  workflow_call:

jobs:
  check_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures all tags are fetched

      - name: Get last stable or pre-release tag
        id: last_tag
        run: |
          # Get the most recent tag, fallback to empty string if no tags exist
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo '')
          echo "tag=$tag" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Determine next version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        id: next_version
        run: |
          NEXT_VERSION=$(npx semantic-release --dry-run | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+(-next\.[0-9]+)?')
          echo "next_version=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Compare version changes
        id: version_check
        run: |
          OLD_VERSION="${{ env.tag }}"
          NEW_VERSION="${{ env.next_version }}"

          # Handle the case where there are no previous tags
          if [[ -z "$OLD_VERSION" ]]; then
            echo "✅ Allowed: No previous tag found, allowing release."
            exit 0
          fi

          # Extract numeric parts only
          OLD_MAJOR=$(echo "$OLD_VERSION" | grep -oP '^[0-9]+' || echo 0)
          OLD_MINOR=$(echo "$OLD_VERSION" | grep -oP '(?<=^[0-9]+\.)[0-9]+' || echo 0)
          OLD_PATCH=$(echo "$OLD_VERSION" | grep -oP '(?<=^[0-9]+\.[0-9]+\.)[0-9]+' || echo 0)

          NEW_MAJOR=$(echo "$NEW_VERSION" | grep -oP '^[0-9]+' || echo 0)
          NEW_MINOR=$(echo "$NEW_VERSION" | grep -oP '(?<=^[0-9]+\.)[0-9]+' || echo 0)
          NEW_PATCH=$(echo "$NEW_VERSION" | grep -oP '(?<=^[0-9]+\.[0-9]+\.)[0-9]+' || echo 0)

          # If transitioning from pre-release (-next) to stable
          if [[ "$OLD_VERSION" == *"-next"* && "$NEW_VERSION" != *"-next"* ]]; then
            echo "✅ Allowed: Transitioning from pre-release to stable release."
            exit 0
          fi

          # Allow major or minor updates
          if [[ "$NEW_MAJOR" -gt "$OLD_MAJOR" || "$NEW_MINOR" -gt "$OLD_MINOR" ]]; then
            echo "✅ Allowed: Major or minor update detected."
            exit 0
          elif [[ "$NEW_PATCH" -gt "$OLD_PATCH" && "$NEW_MAJOR" -eq "$OLD_MAJOR" && "$NEW_MINOR" -eq "$OLD_MINOR" ]]; then
            echo "❌ Disallowed: Patch update detected for stable release."
            exit 1
          else
            echo "✅ Allowed: No version changes detected."
            exit 0
          fi
