name: version-check

on:
  workflow_call:

jobs:
  check_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all tags

      - name: Get last tag
        id: last_tag
        run: |
          # Get the most recent tag (if any)
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          # Remove the "v" prefix if it exists
          last_tag=${last_tag#v}
          echo "last_tag=$last_tag" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"

      - name: Install dependencies
        run: npm install

      - name: Determine next version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        id: next_version
        run: |
          set -e

          # Run semantic-release in dry-run mode and extract the next version
          next_version=$(npx semantic-release --dry-run 2>&1 | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+(-next\.[0-9]+)?' || echo "")

          # If no version is found, default to 1.0.0
          if [[ -z "$next_version" ]]; then
            echo "‚ö†Ô∏è No previous version detected, defaulting to 1.0.0"
            next_version="1.0.0"
          fi

          echo "next_version=$next_version" >> $GITHUB_ENV

      - name: Compare versions
        id: version_check
        run: |
          LAST_VERSION="${{ env.last_tag }}"
          NEXT_VERSION="${{ env.next_version }}"

          # If no last tag exists, allow deployment
          if [[ -z "$LAST_VERSION" ]]; then
            echo "‚úÖ No previous tag found, allowing deployment."
            exit 0
          fi

          # Remove pre-release suffix to compare base versions
          LAST_BASE_VERSION=$(echo "$LAST_VERSION" | sed -E 's/-next\.[0-9]+$//')
          NEXT_BASE_VERSION=$(echo "$NEXT_VERSION" | sed -E 's/-next\.[0-9]+$//')

          # Extract major, minor, and patch numbers
          LAST_MAJOR=$(echo "$LAST_BASE_VERSION" | cut -d. -f1)
          LAST_MINOR=$(echo "$LAST_BASE_VERSION" | cut -d. -f2)
          LAST_PATCH=$(echo "$LAST_BASE_VERSION" | cut -d. -f3)

          NEXT_MAJOR=$(echo "$NEXT_BASE_VERSION" | cut -d. -f1)
          NEXT_MINOR=$(echo "$NEXT_BASE_VERSION" | cut -d. -f2)
          NEXT_PATCH=$(echo "$NEXT_BASE_VERSION" | cut -d. -f3)

          # Check if last version is a pre-release
          if [[ "$LAST_VERSION" == *"-next"* ]]; then
            echo "üîé Last version is a pre-release."
            if [[ "$LAST_BASE_VERSION" == "$NEXT_BASE_VERSION" ]]; then
              echo "‚úÖ Allowed: Transitioning pre-release ($LAST_VERSION) to stable ($NEXT_VERSION)."
              exit 0
            fi
            if [[ "$NEXT_MAJOR" -gt "$LAST_MAJOR" || "$NEXT_MINOR" -gt "$LAST_MINOR" ]]; then
              echo "‚úÖ Allowed: Pre-release transitioning with major/minor bump."
              exit 0
            else
              echo "‚ùå Disallowed: Patch update for pre-release."
              exit 1
            fi
          fi

          # If it's a stable release, allow major, minor, or patch updates
          echo "‚úÖ Allowed: Stable version update (major/minor/patch)."
          exit 0
