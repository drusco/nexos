name: docs

on:
  workflow_call:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"

      - name: Cache root node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install root dependencies
        run: npm install

      - name: Cache Docusaurus node_modules
        uses: actions/cache@v4
        with:
          path: docusaurus/node_modules
          key: ${{ runner.os }}-node-docusaurus-${{ hashFiles('docusaurus/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-docusaurus-

      - name: Install Docusaurus dependencies
        run: npm install
        working-directory: ./docusaurus

      - name: Fetch Latest Pre-Release Tag
        id: pre_release_tag
        run: |
          PRE_RELEASE_TAG=$(gh release list --json tagName,isPrerelease -q '.[] | select(.isPrerelease) | .tagName' | head -n 1)
          echo "PRE_RELEASE_TAG=$PRE_RELEASE_TAG" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Last Stable Release Tags (With Docs)
        id: stable_release_tags
        run: |
          STABLE_TAGS_TOTAL=3
          STABLE_TAGS=$(gh release list --json tagName,isPrerelease -q '.[] | select(.isPrerelease | not) | .tagName' | head -n $STABLE_TAGS_TOTAL)
          echo "STABLE_TAGS=$(echo $STABLE_TAGS | jq -c '[.[]]')" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download and Extract Docs for Each Selected Tag
        run: |
          mkdir -p docusaurus/versioned_docs

          # Fetch and extract pre-release docs (rename to "version-next")
          if [ -n "$PRE_RELEASE_TAG" ]; then
            gh release view "$PRE_RELEASE_TAG" --json assets -q '.assets[].name' | grep -q "docs.tar.gz" && {
              gh release download "$PRE_RELEASE_TAG" --pattern "docs.tar.gz" --dir .
              tar -xzf docs.tar.gz -C docusaurus/versioned_docs
              rm docs.tar.gz
              # Rename extracted directory to "version-next"
              PRE_RELEASE_DIR=$(ls docusaurus/versioned_docs | grep "version-")
              mv "docusaurus/versioned_docs/$PRE_RELEASE_DIR" "docusaurus/versioned_docs/version-next"
            } || echo "Skipping $PRE_RELEASE_TAG: No docs.tar.gz found"
          fi

          # Fetch and extract stable docs
          for TAG in $(echo $STABLE_TAGS | jq -r '.[]'); do
            gh release view "$TAG" --json assets -q '.assets[].name' | grep -q "docs.tar.gz" && {
              gh release download "$TAG" --pattern "docs.tar.gz" --dir .
              tar -xzf docs.tar.gz -C docusaurus/versioned_docs
              rm docs.tar.gz
            } || echo "Skipping $TAG: No docs.tar.gz found"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create versions.json
        run: |
          if [ -n "$PRE_RELEASE_TAG" ]; then
            echo '["next"]' > docusaurus/versions.json
            echo "$STABLE_TAGS" | jq -c 'map(sub("^v"; "")) as $tags | ["next"] + $tags' >> docusaurus/versions.json
          else
            echo "$STABLE_TAGS" | jq -c 'map(sub("^v"; ""))' > docusaurus/versions.json
          fi

      - name: Build Docusaurus
        run: npm run build
        working-directory: ./docusaurus

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./docusaurus/build"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          branch: gh-pages
          folder: docusaurus/build
