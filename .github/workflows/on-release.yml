name: on-release

on:
  workflow_call:

permissions:
  contents: read

jobs:
  onrelease:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure we fetch all tags

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Root dependencies
        run: npm install

      - name: Cache Docusaurus node_modules
        uses: actions/cache@v4
        with:
          path: docusaurus/node_modules
          key: ${{ runner.os }}-node-docusaurus-${{ hashFiles('docusaurus/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-docusaurus-

      - name: Install Docusaurus dependencies
        run: npm install
        working-directory: ./docusaurus

      - name: Get the Git tag
        run: |
          TAG_NAME=$(git describe --tags --abbrev=0)
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          IS_PRERELEASE=$(git tag -l "$TAG_NAME" | grep -E "^$TAG_NAME$" | grep -i "prerelease")
          echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_ENV

      - name: Version Docs with Docusaurus
        run: |
          cd docusaurus

          # Run docs:version with 'next' for pre-releases, else use the tag name
          if [ "$IS_PRERELEASE" ]; then
            echo "Pre-release detected. Using 'next' as the version name."
            npx docusaurus docs:version next
          else
            echo "Stable release detected. Using $TAG_NAME as the version name."
            npx docusaurus docs:version $TAG_NAME
          fi

          # Ensure versioned_docs folder exists
          if [ -d "versioned_docs/version-$TAG_NAME" ] || [ -d "versioned_docs/version-next" ]; then
            # Create the tar.gz file with the versioned docs content
            if [ -d "versioned_docs/version-next" ]; then
              tar -czf docs.tar.gz -C versioned_docs "version-next"
            else
              tar -czf docs.tar.gz -C versioned_docs "version-$TAG_NAME"
            fi
          else
            echo "Error: versioned_docs/version-$TAG_NAME or version-next does not exist!"
            exit 1
          fi

      - name: Upload Docs as Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: docusaurus/docs.tar.gz
          tag_name: ${{ env.TAG_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
